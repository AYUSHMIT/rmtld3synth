main: WITHIN
##
## Ends in an error in state: 0.
##
## main' -> . main [ # ]
##
## The known suffix of the stack is as follows:
##
##

Your expression is missing or it doesn't make sense.

main: RISE WITHIN
##
## Ends in an error in state: 2.
##
## temporal -> RISE . atom WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## RISE
##

The rest of rise exp. is missing. Try "rise" <F> "within" <C>

main: NEGATION WITHIN
##
## Ends in an error in state: 5.
##
## atom -> NEGATION . atom [ WITHIN UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## NEGATION
##

Ill-formed expression.

main: LPAR WITHIN
##
## Ends in an error in state: 5.
##
## atom -> LPAR . formula RPAR [ WITHIN UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Missing formula after '('. Try "(" <F> ")"

main: PREV WITHIN
##
## Ends in an error in state: 6.
##
## temporal -> PREV . atom WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## PREV
##

Missing formula after 'previous'. Try "previous" <F> "within" <C>


main: DURATION WITHIN
##
## Ends in an error in state: 8.
##
## term -> DURATION . OF formula IN interval [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## DURATION
##

Missing the 'of' after duration. Try "duration of" <F> "in" <I>

main: DURATION OF WITHIN
##
## Ends in an error in state: 9.
##
## term -> DURATION OF . formula IN interval [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## DURATION OF
##

Missing formula after 'of'. Try "duration of" <F> "in" <I>

main: PAST WITHIN
##
## Ends in an error in state: 10.
##
## temporal -> PAST . EVENTUALLY atom WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## PAST
##

Missing eventually after past. Try "past eventually" <F> "within" <C>

main: PAST EVENTUALLY WITHIN
##
## Ends in an error in state: 11.
##
## temporal -> PAST EVENTUALLY . atom WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## PAST EVENTUALLY
##

Missing formula after eventually. Try "past eventually" <F> "within" <C>

main: NUM WITHIN
##
## Ends in an error in state: 13.
##
## atom -> term . LESS term [ WITHIN UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
## atom -> term . GREATER term [ WITHIN UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
## atom -> term . LESSOREQUAL term [ WITHIN UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
## atom -> term . GREATEROREQUAL term [ WITHIN UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
## term -> term . PLUS term_atom [ TIMES PLUS LESSOREQUAL LESS GREATEROREQUAL GREATER ]
## term -> term . TIMES term_atom [ TIMES PLUS LESSOREQUAL LESS GREATEROREQUAL GREATER ]
##
## The known suffix of the stack is as follows:
## term
##

Missing operator after the number.

main: NUM TIMES WITHIN
##
## Ends in an error in state: 14.
##
## term -> term TIMES . term_atom [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## term TIMES
##

Missing term after the '*' operator. Try <T> "*" <T>

main: NUM GREATER LPAR WITHIN
##
## Ends in an error in state: 14.
##
## term -> LPAR . term RPAR [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed expression.

main: NUM GREATER LPAR NUM WITHIN
##
## Ends in an error in state: 15.
##
## term -> term . PLUS term [ TIMES RPAR PLUS ]
## term -> term . TIMES term [ TIMES RPAR PLUS ]
## term -> LPAR term . RPAR [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## LPAR term
##

Ill-formed expression.

main: NUM PLUS WITHIN
##
## Ends in an error in state: 16.
##
## term -> term PLUS . term_atom [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## term PLUS
##

Missing term after the '+' operator. Try <T> "+" <T>

main: NUM PLUS NUM TWODOTS
##
## Ends in an error in state: 17.
##
## term -> term . PLUS term [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
## term -> term PLUS term . [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
## term -> term . TIMES term [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## term PLUS term
##

Ill-formed expression.

main: NUM LESSOREQUAL WITHIN
##
## Ends in an error in state: 18.
##
## atom -> term LESSOREQUAL . term [ WITHIN UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## term LESSOREQUAL
##

Missing term after the '<=' operator. Try <T> "<=" <T>

main: NUM LESSOREQUAL NUM TWODOTS
##
## Ends in an error in state: 19.
##
## atom -> term LESSOREQUAL term . [ WITHIN UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
## term -> term . PLUS term_atom [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR IN IMPLIES EOF AND ]
## term -> term . TIMES term_atom [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## term LESSOREQUAL term
##

The addition of ':' doesn't make sense.

main: NUM LESS WITHIN
##
## Ends in an error in state: 20.
##
## atom -> term LESS . term [ WITHIN UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## term LESS
##

Missing term after the '<' operator. Try <T> "<" <T>

main: NUM LESS NUM TWODOTS
##
## Ends in an error in state: 21.
##
## atom -> term LESS term . [ WITHIN UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
## term -> term . PLUS term_atom [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR IN IMPLIES EOF AND ]
## term -> term . TIMES term_atom [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## term LESS term
##

The addition of ':' doesn't make sense.

main: NUM GREATEROREQUAL WITHIN
##
## Ends in an error in state: 22.
##
## atom -> term GREATEROREQUAL . term [ WITHIN UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## term GREATEROREQUAL
##

Missing term after the '>=' operator. Try <T> ">=" <T>

main: NUM GREATEROREQUAL NUM TWODOTS
##
## Ends in an error in state: 23.
##
## atom -> term GREATEROREQUAL term . [ WITHIN UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
## term -> term . PLUS term_atom [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR IN IMPLIES EOF AND ]
## term -> term . TIMES term_atom [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## term GREATEROREQUAL term
##

The addition of ':' doesn't make sense.

main: NUM GREATER WITHIN
##
## Ends in an error in state: 24.
##
## atom -> term GREATER . term [ WITHIN UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## term GREATER
##

Missing term after the '>' operator. Try <T> ">" <T>

main: NUM GREATER NUM TWODOTS
##
## Ends in an error in state: 25.
##
## atom -> term GREATER term . [ WITHIN UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
## term -> term . PLUS term_atom [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR IN IMPLIES EOF AND ]
## term -> term . TIMES term_atom [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## term GREATER term
##

The addition of ':' doesn't make sense.

main: PAST EVENTUALLY FALSE UNTIL
##
## Ends in an error in state: 26.
##
## temporal -> PAST EVENTUALLY atom . WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## PAST EVENTUALLY atom
##

Missing the rest of the exp. Try "past eventually" <F> "within" <C>

main: PAST EVENTUALLY FALSE WITHIN WITHIN
##
## Ends in an error in state: 27.
##
## temporal -> PAST EVENTUALLY atom WITHIN . time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## PAST EVENTUALLY atom WITHIN
##

Missing the rest of the exp. Try "past eventually" <F> "within" <C>

main: ALWAYS FALSE WITHIN LESSOREQUAL WITHIN
##
## Ends in an error in state: 29.
##
## time -> LESSOREQUAL . TIME [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## LESSOREQUAL
##

The expression is incomplete. Try "always" <F> "within" "<=" <integer> <U>

main: ALWAYS FALSE WITHIN LESS WITHIN
##
## Ends in an error in state: 31.
##
## time -> LESS . TIME [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## LESS
##

The expression is incomplete. Try "always" <F> "within" "<" <integer> <U>

main: ALWAYS FALSE WITHIN EQUAL WITHIN
##
## Ends in an error in state: 33.
##
## time -> EQUAL . TIME [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## EQUAL
##

The expression is incomplete. Try "always" <F> "within" "=" <integer> <U>

main: NEXT WITHIN
##
## Ends in an error in state: 36.
##
## temporal -> NEXT . atom WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## NEXT
##

Ill-formed expression. Try "next" <F> "within" <C>

main: NEXT FALSE UNTIL
##
## Ends in an error in state: 37.
##
## temporal -> NEXT atom . WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## NEXT atom
##

Ill-formed expression. Try "next" <F> "within" <C> 

main: NEXT FALSE WITHIN WITHIN
##
## Ends in an error in state: 38.
##
## temporal -> NEXT atom WITHIN . time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## NEXT atom WITHIN
##

Ill-formed expression. Try "next" <F> "within" <C>

main: LPAR HISTORICALLY WITHIN
##
## Ends in an error in state: 40.
##
## temporal -> HISTORICALLY . atom WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## HISTORICALLY
##

Ill-formed expression. Try ( "historically" <F> "within" <C> )

main: HISTORICALLY FALSE UNTIL
##
## Ends in an error in state: 41.
##
## temporal -> HISTORICALLY atom . WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## HISTORICALLY atom
##

The exp. is badly written. Try "historically" <F> "within" <C>

main: HISTORICALLY FALSE WITHIN WITHIN
##
## Ends in an error in state: 42.
##
## temporal -> HISTORICALLY atom WITHIN . time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## HISTORICALLY atom WITHIN
##

Ill-formed expression. Try "historically" <F> "within" <C>

main: FALL WITHIN
##
## Ends in an error in state: 44.
##
## temporal -> FALL . atom WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## FALL
##

Ill-formed expression. Try "fall" <F> "within" <C>

main: FALL FALSE WITHIN WITHIN
##
## Ends in an error in state: 46.
##
## temporal -> FALL atom WITHIN . time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## FALL atom WITHIN
##

Ill-formed expression. Try "fall" <F> "within" <C>

main: FALL FALSE TWODOTS
##
## Ends in an error in state: 50.
##
## temporal -> FALL atom . WITHIN time [ UNTIL SINCE RPAR OR ON IN IMPLIES EOF AND ]
## temporal -> FALL atom . [ UNTIL SINCE RPAR OR ON IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## FALL atom
##

Ill-formed expression.

main: EVENTUALLY WITHIN
##
## Ends in an error in state: 48.
##
## temporal -> EVENTUALLY . atom WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## EVENTUALLY
##

Ill-formed expression. Try "eventually" <F> "within" <C>

main: EVENTUALLY FALSE UNTIL
##
## Ends in an error in state: 49.
##
## temporal -> EVENTUALLY atom . WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## EVENTUALLY atom
##

Ill-formed expression. Try "eventually" <F> "within" <C>

main: EVENTUALLY FALSE WITHIN WITHIN
##
## Ends in an error in state: 50.
##
## temporal -> EVENTUALLY atom WITHIN . time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## EVENTUALLY atom WITHIN
##

Ill-formed expression. Try "eventually" <F> "within" <C>

main: LPAR ALWAYS WITHIN
##
## Ends in an error in state: 52.
##
## temporal -> ALWAYS . atom WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## ALWAYS
##

The exp. is incomplete. Try "(" "always" <F> "within" <C> ")"

main: ALWAYS FALSE UNTIL
##
## Ends in an error in state: 53.
##
## temporal -> ALWAYS atom . WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## ALWAYS atom
##

Ill-formed expression. Try "always" <F> "within" <C>

main: ALWAYS FALSE WITHIN WITHIN
##
## Ends in an error in state: 54.
##
## temporal -> ALWAYS atom WITHIN . time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## ALWAYS atom WITHIN
##

Ill-formed expression. Try "always" <F> "within" <C>

main: FALSE TWODOTS
##
## Ends in an error in state: 56.
##
## conjunction -> temporal . [ RPAR OR IN IMPLIES EOF AND ]
## temporal -> temporal . UNTIL atom WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
## temporal -> temporal . SINCE atom WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## temporal
##

You are missing the operator.

main: FALSE UNTIL WITHIN
##
## Ends in an error in state: 57.
##
## temporal -> temporal UNTIL . atom WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## temporal UNTIL
##

Ill-formed expression. Try <F> "until" <F> "within" <C>

main: FALSE UNTIL FALSE UNTIL
##
## Ends in an error in state: 58.
##
## temporal -> temporal UNTIL atom . WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## temporal UNTIL atom
##

Ill-formed expression. Try <F> "until" <F> "within" <C>

main: FALSE UNTIL FALSE WITHIN WITHIN
##
## Ends in an error in state: 59.
##
## temporal -> temporal UNTIL atom WITHIN . time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## temporal UNTIL atom WITHIN
##

Ill-formed expression. Try <F> "until" <F> "within" <C>

main: FALSE SINCE WITHIN
##
## Ends in an error in state: 61.
##
## temporal -> temporal SINCE . atom WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## temporal SINCE
##

Ill-formed expression. Try <F> "since" <F> "within" <C>

main: FALSE SINCE FALSE UNTIL
##
## Ends in an error in state: 62.
##
## temporal -> temporal SINCE atom . WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## temporal SINCE atom
##

Ill-formed expression. Try <F> "since" <F> "within" <C>

main: FALSE SINCE FALSE WITHIN WITHIN
##
## Ends in an error in state: 63.
##
## temporal -> temporal SINCE atom WITHIN . time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## temporal SINCE atom WITHIN
##

Ill-formed expression. Try <F> "since" <F> "within" <C>

main: FALSE IMPLIES WITHIN
##
## Ends in an error in state: 66.
##
## implies -> implies IMPLIES . disjunction [ RPAR IN IMPLIES EOF ]
##
## The known suffix of the stack is as follows:
## implies IMPLIES
##

You are missing the operand after the operator ->. Try <F> "->" <F>

main: FALSE ON WITHIN
##
## Ends in an error in state: 70.
##
## temporal -> temporal ON . TIME [ UNTIL SINCE RPAR OR ON IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## temporal ON
##

Ill-formed expression.

main: FALSE OR WITHIN
##
## Ends in an error in state: 68.
##
## disjunction -> disjunction OR . conjunction [ RPAR OR IN IMPLIES EOF ]
##
## The known suffix of the stack is as follows:
## disjunction OR
##

You are missing an operand after the operator ||. Try <F> "||" <F>

main: FALSE AND WITHIN
##
## Ends in an error in state: 70.
##
## conjunction -> conjunction AND . temporal [ RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## conjunction AND
##

You are missing an operand after the operator &&. Try <F> "&&" <F>

main: FALSE AND FALSE TWODOTS
##
## Ends in an error in state: 71.
##
## conjunction -> conjunction AND temporal . [ RPAR OR IN IMPLIES EOF AND ]
## temporal -> temporal . UNTIL atom WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
## temporal -> temporal . SINCE atom WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## conjunction AND temporal
##

Try removing ':'

main: DURATION OF FALSE RPAR
##
## Ends in an error in state: 74.
##
## term -> DURATION OF formula . IN interval [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## DURATION OF formula
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 56, spurious reduction of production conjunction -> temporal
## In state 73, spurious reduction of production disjunction -> conjunction
## In state 85, spurious reduction of production implies -> disjunction
## In state 65, spurious reduction of production formula -> implies
##

Ill-formed expression. Try "duration of" <F> "in" <I>

main: DURATION OF FALSE IN WITHIN
##
## Ends in an error in state: 75.
##
## term -> DURATION OF formula IN . interval [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## DURATION OF formula IN
##

Ill-formed expression. Try "duration of" <F> "in" <I>

main: DURATION OF FALSE IN LSQPAR WITHIN
##
## Ends in an error in state: 76.
##
## interval -> LSQPAR . term_atom COMMA term_atom RSQPAR [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## LSQPAR
##

Ill-formed expression. Try "duration of" <F> "in" "[" <I> "," <I> "]"

main: DURATION OF FALSE IN LSQPAR NUM WITHIN
##
## Ends in an error in state: 77.
##
## interval -> LSQPAR term_atom . COMMA term_atom RSQPAR [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## LSQPAR term_atom
##

Ill-formed expression. Try "duration of" <F> "in" "[" <I> "," <I> "]"

main: DURATION OF FALSE IN TIME WITHIN
##
## Ends in an error in state: 79.
##
## term -> DURATION OF formula IN TIME . DOTS NUM [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
## term -> DURATION OF formula IN TIME . DOTS TIME [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## DURATION OF formula IN TIME
##

Ill-formed expression.

main: DURATION OF FALSE IN TIME DOTS WITHIN
##
## Ends in an error in state: 80.
##
## term -> DURATION OF formula IN TIME DOTS . NUM [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
## term -> DURATION OF formula IN TIME DOTS . TIME [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## DURATION OF formula IN TIME DOTS
##

Ill-formed expression.

main: DURATION OF FALSE IN LSQPAR NUM COMMA WITHIN
##
## Ends in an error in state: 78.
##
## interval -> LSQPAR term_atom COMMA . term_atom RSQPAR [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## LSQPAR term_atom COMMA
##

Ill-formed expression. Try "duration of" <F> "in" "[" <I> "," <I> "]"

main: DURATION OF FALSE IN LSQPAR NUM COMMA NUM WITHIN
##
## Ends in an error in state: 79.
##
## interval -> LSQPAR term_atom COMMA term_atom . RSQPAR [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## LSQPAR term_atom COMMA term_atom
##

Ill-formed expression. Try "duration of" <F> "in" "[" <I> "," <I> "]"

main: DURATION OF FALSE IN NUM WITHIN
##
## Ends in an error in state: 81.
##
## interval -> term_atom . DOTS term_atom [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## term_atom
##

Ill-formed expression. Try "duration of" <F> "in" <I>

main: DURATION OF FALSE IN NUM DOTS WITHIN
##
## Ends in an error in state: 82.
##
## interval -> term_atom DOTS . term_atom [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## term_atom DOTS
##

Ill-formed expression. Try "duration of" <F> "in" <I> ".." <I>

main: DURATION OF FALSE IN LSQPAR TIME WITHIN
##
## Ends in an error in state: 88.
##
## term -> DURATION OF formula IN LSQPAR TIME . COMMA NUM RSQPAR [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
## term -> DURATION OF formula IN LSQPAR TIME . COMMA TIME RSQPAR [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## DURATION OF formula IN LSQPAR TIME
##

Ill-formed expression.

main: DURATION OF FALSE IN LSQPAR TIME COMMA WITHIN
##
## Ends in an error in state: 89.
##
## term -> DURATION OF formula IN LSQPAR TIME COMMA . NUM RSQPAR [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
## term -> DURATION OF formula IN LSQPAR TIME COMMA . TIME RSQPAR [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## DURATION OF formula IN LSQPAR TIME COMMA
##

Ill-formed expression.

main: DURATION OF FALSE IN LSQPAR TIME COMMA TIME WITHIN
##
## Ends in an error in state: 90.
##
## term -> DURATION OF formula IN LSQPAR TIME COMMA TIME . RSQPAR [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## DURATION OF formula IN LSQPAR TIME COMMA TIME
##

Ill-formed expression.

main: DURATION OF FALSE IN LSQPAR TIME COMMA NUM WITHIN
##
## Ends in an error in state: 92.
##
## term -> DURATION OF formula IN LSQPAR TIME COMMA NUM . RSQPAR [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## DURATION OF formula IN LSQPAR TIME COMMA NUM
##

Ill-formed expression.

main: PREV FALSE UNTIL
##
## Ends in an error in state: 86.
##
## temporal -> PREV atom . WITHIN time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## PREV atom
##

Ill-formed expression. Try "previous" <F> "within" <C>

main: PREV FALSE WITHIN WITHIN
##
## Ends in an error in state: 87.
##
## temporal -> PREV atom WITHIN . time [ UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## PREV atom WITHIN
##

Ill-formed expression. Try "previous" <F> "within" <C>

main: DURATION OF FALSE IN LSQPAR NUM COMMA TIME WITHIN
##
## Ends in an error in state: 96.
##
## term -> DURATION OF formula IN LSQPAR NUM COMMA TIME . RSQPAR [ WITHIN UNTIL TIMES SINCE RPAR PLUS OR LESSOREQUAL LESS IN IMPLIES GREATEROREQUAL GREATER EOF AND ]
##
## The known suffix of the stack is as follows:
## DURATION OF formula IN LSQPAR NUM COMMA TIME
##

Ill-formed expression.

main: LPAR NUM WITHIN
##
## Ends in an error in state: 91.
##
## atom -> term . LESS term [ UNTIL SINCE RPAR OR IMPLIES AND ]
## atom -> term . GREATER term [ UNTIL SINCE RPAR OR IMPLIES AND ]
## atom -> term . LESSOREQUAL term [ UNTIL SINCE RPAR OR IMPLIES AND ]
## atom -> term . GREATEROREQUAL term [ UNTIL SINCE RPAR OR IMPLIES AND ]
## term -> term . PLUS term [ TIMES RPAR PLUS LESSOREQUAL LESS GREATEROREQUAL GREATER ]
## term -> term . TIMES term [ TIMES RPAR PLUS LESSOREQUAL LESS GREATEROREQUAL GREATER ]
## term -> LPAR term . RPAR [ TIMES RPAR PLUS LESSOREQUAL LESS GREATEROREQUAL GREATER ]
##
## The known suffix of the stack is as follows:
## LPAR term
##

Ill-formed expression.

main: LPAR FALSE IN
##
## Ends in an error in state: 89.
##
## atom -> LPAR formula . RPAR [ WITHIN UNTIL SINCE RPAR OR IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## LPAR formula
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 56, spurious reduction of production conjunction -> temporal
## In state 73, spurious reduction of production disjunction -> conjunction
## In state 85, spurious reduction of production implies -> disjunction
## In state 65, spurious reduction of production formula -> implies
##

Missing the right parenthesis.

main: HISTORICALLY WITHIN
##
## Ends in an error in state: 94.
##
## scope -> HISTORICALLY . TWODOTS formula [ EOF ]
## temporal -> HISTORICALLY . atom WITHIN time [ UNTIL SINCE OR IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## HISTORICALLY
##

Ill-formed expression. Try "historically" <F> "within" <C>

main: HISTORICALLY TWODOTS WITHIN
##
## Ends in an error in state: 95.
##
## scope -> HISTORICALLY TWODOTS . formula [ EOF ]
##
## The known suffix of the stack is as follows:
## HISTORICALLY TWODOTS
##

Try removing ':'

main: ALWAYS WITHIN
##
## Ends in an error in state: 97.
##
## scope -> ALWAYS . TWODOTS formula [ EOF ]
## temporal -> ALWAYS . atom WITHIN time [ UNTIL SINCE OR IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## ALWAYS
##

Incorrect expression after always.

main: RISE FALSE TWODOTS
##
## Ends in an error in state: 112.
##
## temporal -> RISE atom . WITHIN time [ UNTIL SINCE RPAR OR ON IN IMPLIES EOF AND ]
## temporal -> RISE atom . [ UNTIL SINCE RPAR OR ON IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## RISE atom
##

Ill-formed expression.

main: RISE FALSE WITHIN WITHIN
##
## Ends in an error in state: 113.
##
## temporal -> RISE atom WITHIN . time [ UNTIL SINCE RPAR OR ON IN IMPLIES EOF AND ]
##
## The known suffix of the stack is as follows:
## RISE atom WITHIN
##

Ill-formed expression. Try "rise" <F> or "rise" <F> "within" <C>

main: ALWAYS TWODOTS WITHIN
##
## Ends in an error in state: 98.
##
## scope -> ALWAYS TWODOTS . formula [ EOF ]
##
## The known suffix of the stack is as follows:
## ALWAYS TWODOTS
##

Try removing ':'

main: FALSE RPAR
##
## Ends in an error in state: 100.
##
## main -> scope . EOF [ # ]
##
## The known suffix of the stack is as follows:
## scope
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 56, spurious reduction of production conjunction -> temporal
## In state 73, spurious reduction of production disjunction -> conjunction
## In state 85, spurious reduction of production implies -> disjunction
## In state 65, spurious reduction of production formula -> implies
## In state 103, spurious reduction of production scope -> formula
##

Missing the right parenthesis before the formula.
